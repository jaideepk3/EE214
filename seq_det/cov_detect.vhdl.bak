
---------------Define state type here-----------------------------
type state is (init,s1,s2,s3,s4);
---------------Define signals of state type-----------------------
signal y_present,y_next: state:=init;
signal out_sig: std_logic;
begin
clock_proc:process(clock,reset)
begin
    if(reset='1') then
        y_present<=init;
    elsif(clock='1' and clock' event) then
        y_present<=y_next;
    end if;
    
end process;

/// To display "abcde", the value of out_ascii = x"61_62_63_64_65"
/// To display "ab", the value of out_ascii    = x"61_62_20_20_20"
/// ASCII representation for blank space in Hex = x"20"

state_transition_proc:process(inp,y_present)
begin
    case y_present is
        when init=>
            if(unsigned(inp)=3) then    --c
                /////assign next state//////
                /////assign out_ascii value /////// 

            else
                if (out_sig = '1') then
                    /////assign out_ascii value ///////
                else            
                    /////assign out_ascii value ///////
                end if; 
                /////assign next state//////
            end if;
            out_sig<='0';
        when s1=>
        /////// Fill the rest of the code //////
        end case;
end process;

outp <= out_sig;

end rch;
