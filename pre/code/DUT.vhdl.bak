-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Full-adder.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(7 downto 0);
       	output_vector: out std_logic_vector(6 downto 0));
end entity;

architecture DutWrap of DUT is
   component prime_add is
     port(
	  A: in STD_LOGIC_VECTOR (3 downto 0);
	  B: in STD_LOGIC_VECTOR (3 downto 0);
	  P: out STD_LOGIC_VECTOR (1 downto 0);
	  C: out STD_LOGIC_VECTOR (4 downto 0));
   end component;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: prime_add
			port map (
					-- order of inputs A3, A2, A1, A0, B3, B2, B1, B0
					
					
					A(3)   => input_vector(7),
					A(2)   => input_vector(6),
					A(1)   => input_vector(5),
					A(0)   => input_vector(4),
					B(3)   => input_vector(3),
					B(2)   => input_vector(2),
					B(1)   => input_vector(1),
					B(0)   => input_vector(0),
                                  -- order of outputs P1,P0,C
					P(1) => output_vector(6),
					P(0) => output_vector(5),
					C(4) => output_vector(4),
					C(3) => output_vector(3),
					C(2) => output_vector(2),
					C(1) => output_vector(1),
					C(0) => output_vector(0)						
					);

end DutWrap;

